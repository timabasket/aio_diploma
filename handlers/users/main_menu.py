import asyncio
import textwrap
import types
import time
from io import BytesIO

import sys
import os
from os import listdir

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InputFile
from PIL import Image, ImageDraw, ImageFont
from aiogram.types import Message, CallbackQuery
from google_sheets import sheet_values_cat1, sheet_values_list
from keyboards.default.screens import screen1, screen2, screen_main_FAQ, screen_categories, screen_return_button, \
    screen_subcategories_return, timer_return_button
from keyboards.inline.choice_buttons import task_manager, timer_keyboard
from aiogram.dispatcher.filters.state import StatesGroup, State
from loader import dp, bot


@dp.message_handler(Command("start"))
async def show_menu(message: Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n –≠—Ç–æ —á–∞—Ç-–±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∫–æ–º–ø–∞–Ω–∏–∏ Eurotec!')
    await asyncio.sleep(2)
    await message.answer(text='–î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É, —á–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω üòâ',
                         reply_markup=screen1)


@dp.message_handler(Text(equals="–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º –ø–æ–ª–µ–∑–µ–Ω"))
async def telling_about_bot(message: Message):
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! \n'
                              '–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∏ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –≤ –¥—Ä—É–≥–∏–µ '
                              '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ! '
                              '\n '
                              '\n'
                              '–Ø –±—É–¥—É –ø–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ —Ç–µ–±–µ  –Ω—É–∂–Ω–æ: \n'
                              '\n'
                              '- üìÖ –°–æ–∑–¥–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å  \n'
                              '- üì¶ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä–∞–º \n'
                              '- üìã –°–æ–∑–¥–∞—Ç—å –ö–ü –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ –±–ª–∞–Ω–∫–µ  \n'
                              '- üïê –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–µ–≥–æ–¥–Ω—è  \n'
                              '\n'
                              '–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è üòâ ', reply_markup=screen2)


@dp.message_handler(Text(equals="–ö —Ä–∞–±–æ—Ç–µ!"))
async def main_FAQ(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ  —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å, —è –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É', reply_markup=screen_main_FAQ)


@dp.message_handler(Text(equals=['üì¶ –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥—Ä—É–≥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']))
async def telling_info_item(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:',
                         reply_markup=screen_categories)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
@dp.message_handler(Text(equals='–¢–æ–≤–∞—Ä—ã Eurotec'))
async def telling_info_item(message: Message):
    await message.answer(sheet_values_cat1, reply_markup=screen_subcategories_return)  # –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É return_to_menu


@dp.message_handler(Text(equals='–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤'))
async def telling_info_item(message: Message):
    await message.answer(text='–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                         reply_markup=screen_subcategories_return)  # –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É return_to_menu

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–∫–Ω—Ü–∏–∏ –ù–ê–ó–ê–î
@dp.message_handler(Text(equals='–í –º–µ–Ω—é'))
async def returning_back(message: Message):
    await message.answer(text='–í –º–µ–Ω—é', reply_markup=screen_main_FAQ)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(Text(equals='üìÖ –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'))
async def telling_tasks(message: Message):
    await message.answer(text='–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë',
                         reply_markup=task_manager)

#—Ç–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
@dp.callback_query_handler(text_contains="Done")
async def telling_cur_tasks(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer(sheet_values_list, reply_markup=screen_return_button)

@dp.callback_query_handler(text="go_back")
async def telling_cur_tasks(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer(text='–í –º–µ–Ω—é', reply_markup=screen_main_FAQ)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—á–µ–≥–æ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞
@dp.message_handler(Command('timer'))
async def timer(message: Message):
    await message.reply(text='–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ', reply_markup=timer_keyboard)
    #await message.answer(cache_time=60)
    #await message.reply(text=f'–í–∞—à id {user_id}'.format(user_id))

# –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.callback_query_handler(text="start_timer")
async def start_timer(call: CallbackQuery):
    user_id = str(call.chat.id)
    timer_data_dict = {}
    _user_time = time.time()
    timer_data_dict[user_id()] = start_timer()
    await call.answer(text='–í–∞—à —Å–ª–æ–≤–∞—Ä—å{}', reply_markup=screen_return_button)
    await call.answer(text='–¢–∞–π–º–µ—Ä –∑–∞–ø—É—à–µ–Ω', reply_markup=screen_return_button)


# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.callback_query_handler(text="stop_timer")
async def stop_timer(call: CallbackQuery):
    delta = time.time() - start_timer
    hours = int((delta // 60) // 60)
    minutes = int((delta // 60) - (hours * 60))
    seconds = round(delta - minutes * 60 - hours * 60 * 60)
    final_time = f"–í–∞—à–µ –≤—Ä–µ–º—è: {'{:02}'.format(hours)}:{'{:02}'.format(minutes)}:{'{:02}'.format(seconds)}"

    stop_timer(start_timer.timer_data_dict.get(get_user_id()))
    await call.answer(final_time, reply_markup=timer_return_button)

class UserState(StatesGroup):
    pick_text = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –ö–ü —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(Text(equals='üìã –°–æ–∑–¥–∞—Ç—å –ö–ü'))
async def sending_a_photo(message: Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:')
    await UserState.pick_text.set()
#—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=UserState.pick_text)
async def get_text(message: Message, state: FSMContext):
    await state.update_data(text_for_pick=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ö–ü –ø—Ä–∏–Ω—è—Ç–æ")
    data = await state.get_data()
    data_text = data.get('text_for_pick')

    # –ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
    wrapper = textwrap.TextWrapper(width=50)
    word_list = wrapper.wrap(text=data_text)
    text_new = ''
    for ii in word_list[:-1]:
        caption_new = text_new + ii + '\n'
    text_new += word_list[-1]

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    im = Image.open("D:\–û–°–ù–û–í–ù–û–ï\–ê–ö–ê–î–ï–ú–ò–Ø\\4 –∫—É—Ä—Å\–î–∏–ø–ª–æ–º\\aio_diploma\data\–ö–ü.jpg")
    # –ø–æ–ª—É—á–∞–µ–º –í –∏ –®
    im_width, im_height = im.size
    # fix start text position
    text_width = 140
    text_height = 1020
    # get max width of text area
    max_width = im_width - text_width
    max_height = im_height - text_height - 400 # 400 –ø–∏–∫—Å–µ–ª–µ–π –Ω–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
    font = ImageFont.truetype('D:\–û–°–ù–û–í–ù–û–ï\—à—Ä–∏—Ñ—Ç—ã\HelveticaRegular.ttf', size=65)
    font_height = font.getsize(data_text)[1]
    # –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    new_text = ''
    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    if font.getsize(data_text)[0] >= max_width:
        lined_text = data_text.split('\n')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        for line in lined_text:
            # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
            if font.getsize(line)[0] >= max_width:
                # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞
                temp_text = line.split()
                temp_line = ''
                temp_line2 = ''
                # –Ω–æ–º–µ—Ä —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ —Å–ª–æ–≤–∞
                i = 0
                # –∏–¥—ë–º –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º —Å—Ç—Ä–æ–∫–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–º–µ—Å—Ç–∏—Ç—å
                while i < len(temp_text):
                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–ï –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                    if font.getsize(temp_text[i])[0] >= max_width:
                        print('Error')
                        temp_line = 'Error line'
                        break
                    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–∫–∞ –≤–º–µ—à–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                    while i < len(temp_text) and font.getsize(temp_line2 + temp_text[i])[0] < max_width:
                        temp_line2 += temp_text[i] + ' '
                        i += 1
                    else:
                        # –ï—Å–ª–∏ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫–∏, —Ç–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –∞ —Å—Ç–∞—Ä—É—é —Å–æ—Ö—Ä.
                        if i < len(temp_text):
                            temp_line += temp_line2 + '\n'
                        else:
                            temp_line += temp_line2
                        temp_line2 = ''
                # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                new_text += temp_line + '\n'
            else:
                new_text += line + '\n'
    else:
        new_text = data_text
    data_text = new_text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—Ä–∞–∫–∞ + –ø–æ–¥—Å–∫–∞–∑–∫–∞
    if new_text.count('\n') * font_height > max_height:
        data_text = f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫\n –†–∞–∑–±–µ–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å–≤—Ç–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –ª–∏—Å—Ç–µ: {int(max_height / font_height)}"

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ —à—Ä–∏—Ñ—Ç–æ–º
    draw_text = ImageDraw.Draw(im)
    draw_text.multiline_text(
        (text_width, text_height),
        text=data_text,  #–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–¥–æ–≤–∞—Ç—å –µ–≥–æ –≤ –º–æ–¥—É–ª—å
        # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        font=font,
        spacing=15,
        fill='#1C0606')
    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏ —Å –Ω—É–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    im.save('D:\–û–°–ù–û–í–ù–û–ï\–ê–ö–ê–î–ï–ú–ò–Ø\\4 –∫—É—Ä—Å\–î–∏–ø–ª–æ–º\\aio_diploma\data\photo\image.PNG')
    photo = open('D:\–û–°–ù–û–í–ù–û–ï\–ê–ö–ê–î–ï–ú–ò–Ø\\4 –∫—É—Ä—Å\–î–∏–ø–ª–æ–º\\aio_diploma\data\photo\image.PNG', 'rb')
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo
    )
    directory = "D:\–û–°–ù–û–í–ù–û–ï\–ê–ö–ê–î–ï–ú–ò–Ø\\4 –∫—É—Ä—Å\–î–∏–ø–ª–æ–º\\aio_diploma\data\photo"
    test = os.listdir(directory)

    for item in test:
        if item.endswith(".PNG"):
            os.remove(os.path.join(directory, item))
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
@dp.message_handler(Text(equals='‚ùì –°–ø—Ä–∞–≤–∫–∞'))
async def telling_info(message: Message):
    await message.answer(text=
    '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?\n'
    '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç-–±–æ—Ç –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' 
    'start\n'
    '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç-–±–æ—Ç–∞:\n'
    '–ò–∑–º–µ—Å—Ç—å–µ–≤ –¢–∏–º–æ—Ñ–µ–π - —Å—Ç—É–¥–µ–Ω—Ç 4 –∫—É—Ä—Å–∞ –§–°–ü–û–∏–î–ü –ù–ò–£ –†–ê–ù–•–∏–ì–°'
    ,reply_markup=screen_return_button)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–∑–µ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(Command('menu'))
async def main_FAQ(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ  —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å, —è –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É', reply_markup=screen_main_FAQ)
